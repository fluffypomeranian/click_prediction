queryabc = "SELECT count(*) FROM clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id limit 10;"
results=dbGetQuery(connection, queryabc)
require("RPostgreSQL")    #install.packages("RPostgreSQL")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
dbExistsTable(connection, "clicks_train")  # confirm the tables are accessible
queryResults1=dbGetQuery(connection, "select * from clicks_train limit 10")
queryResults1
queryabc = "SELECT count(*) FROM clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id limit 10;"
results=dbGetQuery(connection, queryabc)
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
dbExistsTable(connection, "clicks_train")  # confirm the tables are accessible
require("RPostgreSQL")    #install.packages("RPostgreSQL")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
dbExistsTable(connection, "clicks_train")  # confirm the tables are accessible
library(data.table)
# take care , cant be variables with the same name as var or target in dt...
#if you have a beter implamentation of this functions,share it pls ^^
get_probs <- function (dt,var,target,w){
p=dt[,sum(get(target))/.N]
dt[ ,.( prob=(sum(get(target))+w*p )/(.N+w) ),by=eval(var)]
}
DT_fill_NA <- function(DT,replacement=0) {
for (j in seq_len(ncol(DT)))
set(DT,which(is.na(DT[[j]])),j,replacement)
}
super_fread <- function( file , key_var=NULL){
dt <- fread(file)
if(!is.null(key_var)) setkeyv(dt,c(key_var))
return(dt)
}
#
clicks_train  <- super_fread( "data/clicks_train.csv", key_var = "ad_id" )
#
click_prob = clicks_train[,.(sum(clicked)/.N)]
ad_id_probs   <- get_probs(clicks_train,"ad_id","clicked",8)
dim(ad_id_probs)
rm(clicks_train)
gc()
clicks_test   <- super_fread( "data/clicks_test.csv" , key_var = "ad_id" )
clicks_test <- merge( clicks_test, ad_id_probs, all.x = T )
DT_fill_NA( clicks_test, click_prob )
join_query = "
select *
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id
and p.document_id = d.document_id
limit 500000;"
merged=dbGetQuery(connection, join_query)
clicks_train
getClicksTrain="select * from clicks_train limit 10 "
clicks_train = dbGetQuery(connection, getClicksTrain)
clicks_train
# look at promoted_content next
getPromotedContent="select * from promoted_content limit 10"
promoted_content = dbGetQuery(connection, getPromotedContent)
promoted_content
join_query = "
select display_id, ad_id, clicked, document_id
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id
and p.document_id = d.document_id
limit 500000;"
merged=dbGetQuery(connection, join_query)
join_query = "
select display_id, clicks_train.ad_id, clicked, document_id
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id
and p.document_id = d.document_id
limit 500000;"
merged=dbGetQuery(connection, join_query)
join_query = "
select display_id, t.ad_id, clicked, document_id
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id
and p.document_id = d.document_id
limit 500000;"
merged=dbGetQuery(connection, join_query)
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id
and p.document_id = d.document_id
limit 500000;"
merged=dbGetQuery(connection, join_query)
head(merged, 3)
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidenxe_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id
and p.document_id = d.document_id
limit 500000;"
merged=dbGetQuery(connection, join_query)
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidence_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id
and p.document_id = d.document_id
limit 500000;"
merged=dbGetQuery(connection, join_query)
head(merged, 3)
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
merged_table=dbGetQuery(connection, join_query)
require("RPostgreSQL")    #install.packages("RPostgreSQL")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
dbExistsTable(connection, "clicks_train")  # confirm the tables are accessible
# 1)
# try to find features related to ad_id.
# here we join click_train and promoted-content with ad_id.
# look at clicks_train first
getClicksTrain="select * from clicks_train limit 10 "
clicks_train = dbGetQuery(connection, getClicksTrain)
clicks_train
# look at promoted_content next
getPromotedContent="select * from promoted_content limit 10"
promoted_content = dbGetQuery(connection, getPromotedContent)
promoted_content
# join click_train and promoted-content with ad_id new table
# 500k apears to be stable with rstudio.
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidence_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id
limit 500000;"
merged_table=dbGetQuery(connection, join_query)
head(merged_table, 3)
dim(merged_table)
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 10"
new_table = dbGetQuery(connection, getMergedTable)
new_table
getMergedTable="select * from merged_table limit 10"
new_table = dbGetQuery(connection, getMergedTable)
new_table
rm(list = ls())
require("RPostgreSQL")    #install.packages("RPostgreSQL")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
dbExistsTable(connection, "clicks_train")  # confirm the tables are accessible
# 1)
# try to find features related to ad_id.
# here we join click_train and promoted-content with ad_id.
# look at clicks_train first
getClicksTrain="select * from clicks_train limit 10 "
clicks_train = dbGetQuery(connection, getClicksTrain)
clicks_train
# look at promoted_content next
getPromotedContent="select * from promoted_content limit 10"
promoted_content = dbGetQuery(connection, getPromotedContent)
promoted_content
# join click_train and promoted-content with ad_id new table
# 500k apears to be stable with rstudio.
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidence_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id
limit 500000;"
merged_table=dbGetQuery(connection, join_query)
head(merged_table, 3)
dim(merged_table)
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 10"
new_table = dbGetQuery(connection, getMergedTable)
new_table
install.packages("TeX")
install.packages(c("R", "markdown"))
library(knitr)
library(markdown)
#transform the .Rmd to a markdown (.md) file.
knit('r-knitr-markdown.Rmd')
knit('tims_script.Rmd')
require(tree)
dim(new_table)
new_table
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 500000"
new_table = dbGetQuery(connection, getMergedTable)
# list the structure of mydata
str(getMergedTable)
#new_table
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
require("RPostgreSQL")    #install.packages("RPostgreSQL")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
dbExistsTable(connection, "clicks_train")  # confirm the tables are accessible
require("RPostgreSQL")    #install.packages("RPostgreSQL")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
dbExistsTable(connection, "clicks_train")  # confirm the tables are accessible
# 1)
# try to find features related to ad_id.
# here we join click_train and promoted-content with ad_id.
# look at clicks_train first
getClicksTrain="select * from clicks_train limit 10 "
clicks_train = dbGetQuery(connection, getClicksTrain)
clicks_train
# look at promoted_content next
getPromotedContent="select * from promoted_content limit 10"
promoted_content = dbGetQuery(connection, getPromotedContent)
promoted_content
# join click_train and promoted-content with ad_id new table
# 500k apears to be stable with rstudio.
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidence_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id
limit 500000;"
merged_table=dbGetQuery(connection, join_query)
head(merged_table, 3)
dim(merged_table)
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 500000"
new_table = dbGetQuery(connection, getMergedTable)
# list the structure of mydata
str(getMergedTable)
#new_table
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
dim(getMergedTable)
dim(new_table)
str(new_table)
partition_size = floor(0.80 * nrow(new_table)) ## 80% of the sample size
set.seed(123) ## set the seed to make your partition reproductible
partition_index <- sample(seq_len(nrow(new_table)), size = partition_size)
local_train_set <- new_table[partition_index, ]
local_test_set <- new_table[-partition_index, ]
# list the structure of mydata
str(local_test_set)
partition_size = floor(0.80 * nrow(new_table)) ## 80% of the sample size
#set.seed(123) ## set the seed to make your partition reproductible
partition_index <- sample(seq_len(nrow(new_table)), size = partition_size)
local_train_set <- new_table[partition_index, ]
local_test_set <- new_table[-partition_index, ]
# list the structure of mydata
str(local_test_set)
partition_size = floor(0.80 * nrow(new_table)) ## 80% of the sample size
#set.seed(123) ## set the seed to make your partition reproductible
partition_index <- sample(seq_len(nrow(new_table)), size = partition_size)
local_train_set <- new_table[partition_index, ]
local_test_set <- new_table[-partition_index, ]
# list the structure of mydata
str(local_test_set)
# list the structure of mydata
str(new_table)
partition_size = floor(0.80 * nrow(new_table)) ## 80% of the sample size
str(partition_size)
partition_index <- sample(seq_len(nrow(new_table)), size = partition_size)
local_train_set <- new_table[partition_index, ]
local_test_set <- new_table[-partition_index, ]
# list the structure of mydata
str(local_test_set)
require(tree)
dim(new_table)
new_table
hist(new_table)
View(clicks_train)
tree.train=tree(new_table$~.,data=new_table)
?tree
tree.train=tree(new_table ~., data=new_table)
str(local_train_set)
tree.train=tree(local_train_set ~., data=local_train_set)
tree.train=tree(new_table ~., data=local_train_set)
str(local_train_set)
str(local_train_set)
hist(local_train_set$confidence_level)
hist(local_train_set$clicked)
hist(local_train_set$display_id)
hist(local_train_set$ad_id)
hist(local_train_set$document_id)
hist(local_train_set$topic_id)
confidence60=ifelse(local_train_set$confidence_level>=.5,"No","Yes")
dim(confidence60)
confidence60=ifelse(local_train_set$confidence_level>=0.5,"No","Yes")
dim(confidence60)
confidence60
attach(local_train_set)
confidence60=ifelse(local_train_set$confidence_level>=0.5,"No","Yes")
str(confidence60)
confidence60=ifelse(local_train_set$confidence_level>=0.2,"No","Yes")
str(confidence60)
confidence20=ifelse(local_train_set$confidence_level>=0.2,"Yes","No")
str(confidence60)
hist(confidence60)
str(confidence20)
confidence20
local_train_set=data.frame(local_train_set, confidence20)
str(confidence20)
hist(confidence20)
local_train_set=data.frame(local_train_set, confidence20)
tree.local.train.c20=tree(confidence20~.-local_train_set$confidence_level,data=local_train_set)
summary(tree.local.train.c20)
plot(tree.local.train.c20)
text(tree.local.train.c20,pretty=0)
str(new_table)
hist(new_table$confidence_level)
hist(new_table$clicked)
hist(new_table$display_id)
hist(new_table$ad_id)
hist(new_table$document_id)
hist(new_table$topic_id)
attach(new_table)
confidence20=ifelse(new_table$confidence_level>=0.2,"Yes","No")
str(confidence20)
new_table=data.frame(new_table, confidence20)
tree.local.train.c20=tree(confidence20~.-new_table$confidence_level,data=new_table)
summary(tree.local.train.c20)
plot(tree.local.train.c20)
text(tree.local.train.c20,pretty=0)
str(new_table)
partition_size = floor(0.80 * nrow(new_table)) ## 80% of the sample size
str(partition_size)
#set.seed(123) ## set the seed to make your partition reproductible
set.seed(123) ## set the seed to make your partition reproductible
partition_index <- sample(seq_len(nrow(new_table)), size = partition_size)
local_train_set <- new_table[partition_index, ]
local_test_set <- new_table[-partition_index, ]
# list the structure of mydata
str(local_test_set)
