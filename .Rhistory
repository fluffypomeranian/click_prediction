zeros = new_table$clicked = 0
ones
zeros
ones = sample(new_table$clicked=1, 50000)
ones = sample(new_table$clicked[new_table$clicked=1], 50000)
ones = sample(new_table$clicked[new_table$clicked>0], 50000)
dim(new_table$clicked=1)
length(new_table$clicked[new_table$clicked>0])
# CREATE AND WRITE NEW TABLE
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 500000"
new_table = dbGetQuery(connection, getMergedTable)
# list the structure of mydata
str(new_table)
length(new_table$clicked[new_table$clicked>0])
# CREATE AND WRITE NEW TABLE
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 500000"
new_table = dbGetQuery(connection, getMergedTable)
# list the structure of mydata
str(new_table)
length(new_table$clicked[new_table$clicked>0])
length(new_table$clicked[new_table$clicked>0])
# QUERY THE DATABASE
# 1)
# try to find features related to ad_id.
# here we join click_train and promoted-content with ad_id.
# look at clicks_train first
getClicksTrain="select * from clicks_train limit 10 "
clicks_train = dbGetQuery(connection, getClicksTrain)
clicks_train
# look at promoted_content next
getPromotedContent="select * from promoted_content limit 10"
promoted_content = dbGetQuery(connection, getPromotedContent)
promoted_content
# join click_train and promoted-content with ad_id new table
# 500k apears to be stable with rstudio.
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidence_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id
limit 500000;"
merged_table=dbGetQuery(connection, join_query)
head(merged_table, 3)
dim(merged_table)
length(new_table$clicked[new_table$clicked>0])
# CREATE AND WRITE NEW TABLE
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 500000"
new_table = dbGetQuery(connection, getMergedTable)
# list the structure of mydata
str(new_table)
new_table = dbGetQuery(connection, getMergedTable)
# SET UP DATABASE CONNECTION
require("RPostgreSQL")    #install.packages("RPostgreSQL")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
# confirm the tables are accessible
dbExistsTable(connection, "clicks_train")
# CREATE TRAINING AND TEST SET
partition_size = floor(0.80 * nrow(new_table)) ## 80% of the sample size
set.seed(123) ## set the seed to make your partition reproductible
partition_index <- sample(seq_len(nrow(new_table)), size = partition_size)
local_train_set <- new_table[partition_index, ]
local_test_set <- new_table[-partition_index, ]
# LOCAL TEST SET
dim(local_test_set)
head(local_test_set, n=5)
# LOCAL TRAIN SET
dim(local_train_set)
head(local_train_set, n=5)
# GET 50/50 CLICKED
#better:
#keep all the 1 instances from new_table
#ones <— new_table$clicked > 0
# zeros <— sample(new_table where $clicked = 0, 50000, … )
# create one data frame with zeros then append the ones
ones = sample(new_table$clicked[new_table$clicked>0], 50000)
zeros = new_table$clicked = 0
ones
zeros
zeros = sample(new_table$clicked=0, 50000)
length(new_table$clicked[new_table$clicked>0])
dim(new_table$clicked>0)
new_table = dbGetQuery(connection, getMergedTable)
length(new_table$clicked[new_table$clicked>0])
ones = new_table[new_table$clicked>0]
ones = new_table[new_table$clicked>0, ]
length(ones)
ones = new_table[new_table$clicked>0, 50000]
length(ones)
sample(new_table$clicked[new_table$clicked>0], 50000)
sample(new_table$clicked[new_table$clicked>0], 50000, replace=true)
onesVersion2 = ones = subset(new_table, clicked>0)
length(onesVersion2)
length(new_table$clicked[new_table$clicked>0])
# GET 50/50 CLICKED
#better:
#keep all the 1 instances from new_table
#ones <— new_table$clicked > 0
# zeros <— sample(new_table where $clicked = 0, 50000, … )
# create one data frame with zeros then append the ones
ones = new_table[new_table$clicked>0, 50000]
length(ones)
onesVersion2 = ones = subset(new_table, clicked>0)
length(onesVersion2)
zeros = sample(new_table$clicked=0, 50000)
length(new_table$clicked[new_table$clicked>0])
dim(new_table$clicked>0)
# QUERY THE DATABASE
# 1)
# try to find features related to ad_id.
# here we join click_train and promoted-content with ad_id.
# look at clicks_train first
getClicksTrain="select * from clicks_train limit 10 "
clicks_train = dbGetQuery(connection, getClicksTrain)
clicks_train
# look at promoted_content next
getPromotedContent="select * from promoted_content limit 10"
promoted_content = dbGetQuery(connection, getPromotedContent)
promoted_content
# join click_train and promoted-content with ad_id new table
# 500k apears to be stable with rstudio.
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidence_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id
limit 500000;"
merged_table=dbGetQuery(connection, join_query)
head(merged_table, 3)
dim(merged_table)
# CREATE AND WRITE NEW TABLE
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 500000"
new_table = dbGetQuery(connection, getMergedTable)
# list the structure of mydata
str(new_table)
# CREATE TRAINING AND TEST SET
partition_size = floor(0.80 * nrow(new_table)) ## 80% of the sample size
set.seed(123) ## set the seed to make your partition reproductible
partition_index <- sample(seq_len(nrow(new_table)), size = partition_size)
local_train_set <- new_table[partition_index, ]
local_test_set <- new_table[-partition_index, ]
# LOCAL TEST SET
dim(local_test_set)
head(local_test_set, n=5)
# LOCAL TRAIN SET
dim(local_train_set)
head(local_train_set, n=5)
ones = new_table[new_table$clicked>0, 50000]
length(ones)
length(new_table)
table(new_table$clicked)
onesVersion2 = ones = subset(new_table, clicked>0)
dim(onesVersion2)
zeros = sample(new_table$clicked=0, 50000)
zeros = sample(new_table$clicked<1, 50000)
dim(zeros)
zeros = subset(new_table, clicked = 0)
dim(zeros)
undersampled_zeros =apply(zeros, 1, sample, 50000)
zeros = subset(new_table, clicked > 1)
zeros = subset(new_table, clicked < 1)
#zeros = sample(new_table$clicked<1, 50000)
dim(zeros)
undersampled_zeros =apply(zeros, 1, sample, 50000)
undersampled_zeros =apply(zeros, 1, sample, 450014)
undersampled_zeros =apply(zeros, 1, sample, 450013)
undersampled_zeros =apply(zeros, 50000, sample, 1)
undersampled_zeros =apply(zeros, 50000, sample, 1)
table(zeros)
table(zeros$clicked)
table(ones$clicked)
undersampled_zeros = new_table[sample(nrow(new_table), 50000), ]
table(zeros$clicked)
table(ones$clicked)
table(undersampled_zeros$clicked)
undersampled_zeros = zeros[sample(nrow(zeros), 50000), ]
table(undersampled_zeros$clicked)
table(ones$clicked)
dim(undersampled_zeros)
dim(ones)
names(undersampled_zeros)
names(ones)
final_dataset<- data.frame(ones, undersampled_zeros )
final_dataset <- merge(undersampled_zeros, ones )
dim(final_dataset)
final_dataset <- merge(undersampled_zeros, ones, all.x=TRUE)
dim(final_dataset)
final_dataset <- merge(undersampled_zeros, ones, all.x=TRUE, all.y=TRUE)
dim(final_dataset)
# CREATE TRAINING AND TEST SET
partition_size = floor(0.80 * nrow(final_dataset)) ## 80% of the sample size
set.seed(123) ## set the seed to make your partition reproductible
partition_index <- sample(seq_len(nrow(final_dataset)), size = partition_size)
local_train_set <- final_dataset[partition_index, ]
local_test_set <- final_dataset[-partition_index, ]
# LOCAL TEST SET
dim(local_test_set)
head(local_test_set, n=5)
# LOCAL TRAIN SET
dim(local_train_set)
head(local_train_set, n=5)
rf.final_data_set=randomForest(clicked~. -clicked,data=final_dataset,subset=local_train_set)
rf.boston
rf.final_data_set=randomForest(clicked~. -clicked,data=final_dataset,subset=local_train_set)
rf.final_data_set
#install.packages('randomForest', repos="http://cran.r-project.org")
require(randomForest)
set.seed(101)
dim(final_dataset)
rf.final_data_set=randomForest(clicked~. -clicked,data=final_dataset,subset=local_train_set)
rf.final_data_set
attach(local_train_set)
rf.final_data_set=randomForest(clicked~. -clicked,data=final_dataset,subset=local_train_set)
attach(local_train_set)
rf.final_data_set=randomForest(clicked~. -clicked,data=final_dataset,subset=local_train_set)
rf.final_data_set
rf.final_data_set=randomForest(local_train_set$clicked~. -local_train_set$clicked,data=final_dataset,subset=local_train_set)
rf.final_data_set=randomForest(local_train_set~. -local_train_set$clicked,data=final_dataset,subset=local_train_set)
rf.final_data_set=randomForest(local_train_set. -local_train_set$clicked,data=final_dataset,subset=local_train_set)
str(local_train_set)
summary(local_train_set)
attach(final_dataset)
fit=randomForest(clicked~., data=final_dataset,subset=local_train_set)
traceback()
varNames <- names(local_train_set)
# Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("clicked")]
# add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
summary(varNames1)
varNames1
rf.form <- as.formula(paste("y", varNames1, sep = " ~ "))
rf.form
tree_arg <- as.formula(paste("y", varNames1, sep = " ~ "))
fit=randomForest(tree_arg, data=final_dataset,subset=local_train_set)
tree_arg <- as.formula(paste("clicked", varNames1, sep = " ~ "))
fit=randomForest(tree_arg, data=final_dataset,subset=local_train_set)
fit=randomForest(tree_arg, data=final_dataset,subset=local_train_set, ntree=500,importance=T)
dbExistsTable(connection, "clicks_train")
########################### Readme ###############################
#
#   Author:       Tim Siwula
#   Proposal:     http://bit.ly/2gcCLQ4
#   Kaggle:       http://bit.ly/2gMVpPG
#   Github:       http://bit.ly/2gZoTwy
#   Data:         http://bit.ly/2fQ0LHW
#
##################################################################
########################### Notes ################################
# clear workspace ----> rm(list = ls())
#
####################################################################################
########################### SET UP DATABASE CONNECTION ################################
# SET UP DATABASE CONNECTION
require("RPostgreSQL")    #install.packages("RPostgreSQL")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
# confirm the tables are accessible
dbExistsTable(connection, "clicks_train")
####################################################################################
########################### QUERY THE DATABASE ########################################
# QUERY THE DATABASE
# 1)
# try to find features related to ad_id.
# here we join click_train and promoted-content with ad_id.
# look at clicks_train first
getClicksTrain="select * from clicks_train limit 10 "
clicks_train = dbGetQuery(connection, getClicksTrain)
clicks_train
# look at promoted_content next
getPromotedContent="select * from promoted_content limit 10"
promoted_content = dbGetQuery(connection, getPromotedContent)
promoted_content
# join click_train and promoted-content with ad_id new table
# 500k apears to be stable with rstudio.
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidence_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id
limit 500000;"
merged_table=dbGetQuery(connection, join_query)
head(merged_table, 3)
dim(merged_table)
####################################################################################
########################### QUERY THE DATABASE ########################################
# QUERY THE DATABASE
# 1)
# try to find features related to ad_id.
# here we join click_train and promoted-content with ad_id.
# look at clicks_train first
getClicksTrain="select * from clicks_train limit 10 "
clicks_train = dbGetQuery(connection, getClicksTrain)
clicks_train
# look at promoted_content next
getPromotedContent="select * from promoted_content limit 10"
promoted_content = dbGetQuery(connection, getPromotedContent)
promoted_content
# join click_train and promoted-content with ad_id new table
# 500k apears to be stable with rstudio.
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidence_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id
limit 500000;"
merged_table=dbGetQuery(connection, join_query)
head(merged_table, 3)
dim(merged_table)
####################################################################################
########################### CREATE AND WRITE NEW TABLE #############################
# CREATE AND WRITE NEW TABLE
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 500000"
new_table = dbGetQuery(connection, getMergedTable)
# list the structure of mydata
str(new_table)
####################################################################################
########################### GET 50/50 CLICKED ###########################
ones = new_table[new_table$clicked>0, 50000]
length(ones)
length(new_table)
onesVersion2 = ones = subset(new_table, clicked>0)
dim(onesVersion2)
zeros = subset(new_table, clicked < 1)
dim(zeros)
undersampled_zeros = zeros[sample(nrow(zeros), 50000), ]
table(undersampled_zeros$clicked)
table(ones$clicked)
dim(undersampled_zeros)
dim(ones)
names(undersampled_zeros)
names(ones)
final_dataset<- data.frame(ones, undersampled_zeros )
final_dataset <- merge(undersampled_zeros, ones, all.x=TRUE, all.y=TRUE)
# FINAL DATA SET
dim(final_dataset)
head(final_dataset, n=5)
#########################################################################
########################### CREATE TRAINING AND TEST SET ###########################
# CREATE TRAINING AND TEST SET
partition_size = floor(0.80 * nrow(final_dataset)) ## 80% of the sample size
set.seed(123) ## set the seed to make your partition reproductible
partition_index <- sample(seq_len(nrow(final_dataset)), size = partition_size)
local_train_set <- final_dataset[partition_index, ]
local_test_set <- final_dataset[-partition_index, ]
# LOCAL TEST SET
dim(local_test_set)
head(local_test_set, n=5)
# LOCAL TRAIN SET
dim(local_train_set)
head(local_train_set, n=5)
#########################################################################
########################### RANDOM FORESTS ###########################
##########################   INIT       ##############################
#install.packages('randomForest', repos="http://cran.r-project.org")
require(randomForest)
set.seed(101)
dim(final_dataset)
attach(final_dataset)
#########################################################################
##########################   FIT W/RESPONSE CLICKED        ##############
#attach(local_train_set)
summary(local_train_set)
# CREATE REGRESSION ARGUMENT WITH ALL COLUMNS EXCLUDING CLICKED
varNames <- names(local_train_set)
# Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("clicked")]
# add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
# Add response variable and convert to a formula object
tree_arg <- as.formula(paste("clicked", varNames1, sep = " ~ "))
fit=randomForest(tree_arg, data=final_dataset,subset=local_train_set, ntree=500,importance=T)
rf.final_data_set
str(local_train_set)
#########################################################################
#########################################################################
fit=randomForest(tree_arg, data=final_dataset,subset=local_train_set, ntree=500,importance=T)
fit=randomForest(tree_arg, data=final_dataset,subset=local_train_set)
final_dataset <- merge(undersampled_zeros, ones, all.x=FALSE, all.y=FALSE)
# FINAL DATA SET
dim(final_dataset)
final_dataset <- merge(undersampled_zeros, ones, all.x=TRUE, all.y=FALSE)
# FINAL DATA SET
dim(final_dataset)
head(final_dataset, n=5)
final_dataset <- merge(undersampled_zeros, ones, all.x=TRUE, all.y=TRUE)
# FINAL DATA SET
dim(final_dataset)
head(final_dataset, n=5)
install.packages('randomForest', repos="http://cran.r-project.org")
fit=randomForest(tree_arg., data=final_dataset,subset=local_train_set)
varNames <- names(local_train_set)
# Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("clicked")]
# add + sign between exploratory variables
varNames1 <- paste(varNames, collapse = "+")
# Add response variable and convert to a formula object
tree_arg <- as.formula(paste("clicked", varNames1, sep = " ~ "))
fit=randomForest(tree_arg., data=final_dataset,subset=local_train_set)
tree_arg
fit=randomForest(tree_arg, data=final_dataset,subset=local_train_set)
?as.data.frame()
str(final_dataset)
str(local_train_set)
str(tree_arg)
fit=randomForest(clicked ~ display_id + ad_id + document_id + topic_id + confidence_level, data=final_dataset,subset=local_train_set)
rf.final_data_set
rf.fit=randomForest(clicked ~ display_id + ad_id + document_id + topic_id + confidence_level, data=final_dataset,subset=local_train_set)
tree_arg=as.data.frame(tree_arg)
attach(local_train_set)
attach(final_dataset)
clear workspace ----> rm(list = ls())
rm(list = ls())
dbExistsTable(connection, "clicks_train")
########################### SET UP DATABASE CONNECTION ################################
# SET UP DATABASE CONNECTION
require("RPostgreSQL")    #install.packages("RPostgreSQL")
driver <- dbDriver("PostgreSQL")   # loads the PostgreSQL driver
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
connection <- dbConnect(driver, dbname = "clickprediction",
host = "localhost", port = 5432,
user = "admin", password = "admin")
# confirm the tables are accessible
dbExistsTable(connection, "clicks_train")
####################################################################################
########################### QUERY THE DATABASE ########################################
# QUERY THE DATABASE
# 1)
# try to find features related to ad_id.
# here we join click_train and promoted-content with ad_id.
# look at clicks_train first
getClicksTrain="select * from clicks_train limit 10 "
clicks_train = dbGetQuery(connection, getClicksTrain)
clicks_train
# look at promoted_content next
getPromotedContent="select * from promoted_content limit 10"
promoted_content = dbGetQuery(connection, getPromotedContent)
promoted_content
# join click_train and promoted-content with ad_id new table
# 500k apears to be stable with rstudio.
join_query = "
select t.display_id, t.ad_id, t.clicked, d.document_id,
d.topic_id, d.confidence_level
from clicks_train t, promoted_content p, documents_topics d
where t.ad_id = p.ad_id and p.document_id = d.document_id
limit 500000;"
merged_table=dbGetQuery(connection, join_query)
head(merged_table, 3)
dim(merged_table)
####################################################################################
########################### CREATE AND WRITE NEW TABLE #############################
# CREATE AND WRITE NEW TABLE
dbWriteTable(connection, "merged_table", merged_table, row.names=FALSE)
# look at the new table
getMergedTable="select * from merged_table limit 500000"
new_table = dbGetQuery(connection, getMergedTable)
# list the structure of mydata
str(new_table)
####################################################################################
########################### GET 50/50 CLICKED ###########################
ones = new_table[new_table$clicked>0, 50000]
length(ones)
length(new_table)
onesVersion2 = ones = subset(new_table, clicked>0)
dim(onesVersion2)
zeros = subset(new_table, clicked < 1)
dim(zeros)
undersampled_zeros = zeros[sample(nrow(zeros), 50000), ]
table(undersampled_zeros$clicked)
table(ones$clicked)
dim(undersampled_zeros)
dim(ones)
names(undersampled_zeros)
names(ones)
final_dataset <- merge(undersampled_zeros, ones, all.x=TRUE, all.y=TRUE)
# FINAL DATA SET
dim(final_dataset)
head(final_dataset, n=5)
#########################################################################
########################### CREATE TRAINING AND TEST SET ###########################
# CREATE TRAINING AND TEST SET
partition_size = floor(0.80 * nrow(final_dataset)) ## 80% of the sample size
set.seed(123) ## set the seed to make your partition reproductible
partition_index <- sample(seq_len(nrow(final_dataset)), size = partition_size)
local_train_set <- final_dataset[partition_index, ]
local_test_set <- final_dataset[-partition_index, ]
# LOCAL TEST SET
dim(local_test_set)
head(local_test_set, n=5)
# LOCAL TRAIN SET
dim(local_train_set)
head(local_train_set, n=5)
#########################################################################
